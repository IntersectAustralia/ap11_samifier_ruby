#!/usr/bin/env ruby
require 'samifier'
require 'optparse'

required_options = %w{mascot_file accession_file chromosomes_dir genome_file output_file}
options = {}
begin
  opts = OptionParser.new do |opts|
    opts.banner = "Usage: samifier -m mascot_search_results.txt -a accession_table.txt -c chomosome_directory -o output.sam"

    opts.on("-m", "--mascot_file MASCOT_SEARCH_RESULTS_FILE",
              "A Mascot search results file in txt format") do |m|
      options['mascot_file'] = m
    end

    opts.on("-a", "--accession_file ACCESSION_FILE",
              "Accession file mapping identifier to ordered locus name") do |a|
      options['accession_file'] = a
    end

    opts.on("-c", "--chromosomes_directory CHROMOSOMES_DIRECTORY",
              "Directory containing the chromosome files in FASTA format for the given genome") do |c|
      options['chromosomes_dir'] = c
    end

    opts.on("-g", "--genome_file GENOME_FILE",
              "Genome file in gff format") do |g|
      options['genome_file'] = g
    end

    opts.on("-o", "--output_file_prefix OUTPUT_FILE_PREFIX",
              "Prefix of the filename that the SAM format file will be written to") do |out|
      options['output_file'] = out
    end
  end
  opts.parse!
  raise OptionParser::MissingArgument unless (required_options - options.keys).empty?
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
    puts $!.to_s
    puts opts
    exit    
end


@samifier = Samifier::Base.new(options['genome_file'], options['accession_file'])
@samifier.to_sam_file(options['mascot_file'], options['chromosomes_dir'], options['output_file'])

